{"version":3,"sources":["App.js","Food.js","List.js","serviceWorker.js","index.js"],"names":["classifier","Food","props","mostMatched","data","console","log","sortedLabels","map","elem","label","sort","a","b","localeCompare","messages","introduction","Banana","Avocado","LeafyGreen","Orange","conclusion","className","key","confidence","List","useState","App","videoRef","useRef","start","setStart","result","setResult","loaded","setLoaded","useEffect","ml5","imageClassifier","navigator","mediaDevices","getUserMedia","video","audio","then","stream","current","srcObject","play","useInterval","classify","error","results","style","display","ref","width","height","length","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bf375bab.chunk.js","sourcesContent":["\n// export default App;\nimport React, { useEffect, useRef, useState } from \"react\";\nimport ml5 from \"ml5\";\n// import Loader from 'react-loader-spinner';\nimport useInterval from '@use-it/interval';\n\nimport Food from './Food';\nimport List from './List';\n\n// import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport \"./App.css\";\n\nlet classifier;\n\nfunction App() {\n\tconst videoRef = useRef();\n\tconst [start, setStart] = useState(false);\n\tconst [result, setResult] = useState([]);\n\tconst [loaded, setLoaded] = useState(false);\n\n\tuseEffect(() => {\n\t\tclassifier = ml5.imageClassifier(\"./model/model.json\", () => {\n\t\t\tnavigator.mediaDevices\n\t\t\t\t.getUserMedia({ video: true, audio: false })\n\t\t\t\t.then((stream) => {\n\t\t\t\t\tvideoRef.current.srcObject = stream;\n\t\t\t\t\tvideoRef.current.play();\n\t\t\t\t\tsetLoaded(true);\n\t\t\t\t});\n\t\t});\n\t}, []);\n\n\tuseInterval(() => {\n\t\tif (classifier && start) {\n\t\t\tclassifier.classify(videoRef.current, (error, results) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tsetResult(results);\n\t\t\t\t// console.log(results)\n\t\t\t});\n\t\t}\n\t}, 500);\n\n\tconst toggle = () => {\n\t\tsetStart(!start);\n\t\tsetResult([]);\n\t}\n\n\t// const startVideo = () => {\n\t// \tsetStart(true);\n\t// \tnavigator.getUserMedia(\n\t// \t\t{\n\t// \t\t\tvideo: true,\n\t// \t\t},\n\t// \t\t(stream) => {\n\t// \t\t\tlet video = document.getElementsByClassName('app__videoFeed')[0];\n\t// \t\t\tif (video) {\n\t// \t\t\t\tvideo.srcObject = stream;\n\t// \t\t\t}\n\t// \t\t},\n\t// \t\t(err) => console.error(err)\n\t// \t);\n\t// };\n\n\t// const stopVideo = () => {\n\t// \tsetStart(false);\n\t// \tlet video = document.getElementsByClassName('app__videoFeed')[0];\n\t// \tvideo.srcObject.getTracks()[0].stop();\n\t// };\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div className=\"upper\">\n\t\t\t\t<div className=\"app__container\">\n\t\t\t\t\t<div className=\"opening-page\" style = {{display: !start ? 'block' : 'none'}}>\n\t\t\t\t\t\t<div className=\"opening-page__container\">\n\t\t\t\t\t\t\t<h1 className=\"h1\">FoodMood</h1>\n\t\t\t\t\t\t\t{/* <a className=\"btn\" onClick={start}>Click here to learn more!</a> */}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className = \"video\">\n\t\t\t\t\t<video\n\t\t\t\t\t\tref={videoRef}\n\t\t\t\t\t\tstyle={{ transform: \"scale(-1, 1)\" }, {display: start ? 'block' : 'none'}}\n\t\t\t\t\t\twidth=\"500\"\n\t\t\t\t\t\theight=\"300\"\n\t\t\t\t\t\tclassName=\"app__videoFeed\"\n\t\t\t\t\t/>\n\t\t\t\t\t{result.length > 0 && (\n\t\t\t\t\t\t<div className=\"results\">\n\t\t\t\t\t\t\t<List data={result} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t{loaded && (\n\t\t\t\t\t\t<button className=\"button\" onClick={() => toggle()}>\n\t\t\t\t\t\t\t{start ? \"Go back\" : \"Capture food!\"}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t)}\n\t\t\t\t\t{result.length > 0 && (\n\t\t\t\t\t\t<div className=\"results\">\n\t\t\t\t\t\t\t<Food data={result} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\n\nconst Food = (props) => {\n    const mostMatched = props.data[0];\n    console.log(mostMatched);\n    const allLabels = props.data.map((elem) => elem.label);\n    const sortedLabels = allLabels.sort((a, b) => a.localeCompare(b));\n    const messages = {\n        introduction: \"Citrus foods such as oranges help you feel less stressed throughout your day!\",\n        Banana: \"Did you know that Bananas are capable of enhancing your mood! The vitamins in bananas help make you happier everytime you eat one!\",\n        Avocado: \"The vitamins in Avocado help prevent you from feeling uneasiness, worry, and fear.\",\n        LeafyGreen: \"One serving of leafy greens a day can help your brain stay fresh an active for longer periods of time.\",\n        Orange: \"Citrus foods such as oranges help you feel less stressed throughout your day!\",\n        conclusion: \"Find your parent and take a picture of them. Congrats on learning more about mood affecting food!\"\n    }\n    console.log(messages['Banana']);\n    return (\n        <>\n            <ul className=\"food\">\n                {sortedLabels.map((label) => (\n                    <div key={(label === mostMatched.label ? (mostMatched.confidence >= 0.7 ? label : null) : null)}>\n                        <p> <span className=\"bold\">{(label === mostMatched.label ? (mostMatched.confidence >= 0.7 ? \"You have spotted a(n) \" + label + \"!!!!\": null) : null)}</span> </p>\n                        <p> {(label === mostMatched.label ? (mostMatched.confidence >= 0.7 ? messages[label] : null) : null)} </p>\n                    </div>\n                ))}\n            </ul>\n        </>\n    );\n};\n\nexport default Food;\n","import React, { useState } from \"react\";\n\nconst List = (props) => {\n    const mostMatched = props.data[0];\n    const allLabels = props.data.map((elem) => elem.label);\n    const sortedLabels = allLabels.sort((a, b) => a.localeCompare(b));\n\n    const [listStyle, setListStyle] = useState(\"line-through\");\n\n    const handleStrike = () => {\n        setListStyle('line-through');\n    }\n    // const messages = {\n    //     introduction: \"Citrus foods such as oranges help you feel less stressed throughout your day!\",\n    //     Banana: \"Did you know that Bananas are capable of enhancing your mood! The vitamins in bananas help make you happier everytime you eat one!\",\n    //     Avocado: \"The vitamins in Avocado help prevent you from feeling uneasiness, worry, and fear.\",\n    //     // Leafy Green: \"One serving of leafy greens a day can help your brain stay fresh an active for longer periods of time.\",\n    //     Orange: \"Citrus foods such as oranges help you feel less stressed throughout your day!\",\n    //     conclusion: \"Find your parent and take a picture of them. Congrats on learning more about mood affecting food!\"\n    // }\n    return (\n        <>\n            <ul className=\"food\">\n                <p className=\"bold\">Go look for these items and hold them up in front of the camera!</p>\n                {sortedLabels.map((label) => (\n                    <li key={label}>\n                        <span>\n                            <div key={(label === mostMatched.label ? (mostMatched.confidence >= 0.7 ? label : null) : null)}>\n                            </div>\n                            {/* <button onClick={handleStrike()} >Click to remove current fruit from list!</button> */}\n                            <p className=\"name\">{label}</p>\n                        </span>\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n};\n\nexport default List;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}